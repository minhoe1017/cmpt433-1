/**
 * Simple UART demo with Watchdog hits to prevent reboot and Rx Interrupt.
 */
/*
JTAG:
http://blog.parr.us/2014/11/14/beaglebone-black-debugging-via-ti-usb100v2-jtag-emulator/
 */


#include "uart_irda_cir.h"
#include "soc_AM335x.h"
#include "interrupt.h"
#include "beaglebone.h"
#include "consoleUtils.h"
#include "hw_types.h"
#include "watchdog.h"

/******************************************************************************
 **              INTERNAL MACRO DEFINITIONS
 ******************************************************************************/
#define BAUD_RATE_115200          (115200)
#define UART_MODULE_INPUT_CLK     (48000000)

/******************************************************************************
 **              INTERNAL FUNCTION PROTOTYPES
 ******************************************************************************/
static void UartInitialize(void);
static void UARTIsr(void);
static void UartInterruptEnable(void);
static void UartBaudRateSet(void);

/******************************************************************************
 **              GLOBAL VARIABLE DEFINITIONS
 ******************************************************************************/
volatile unsigned char rxByte = 0;
volatile unsigned long rxTextAsciiSum = 0;

/******************************************************************************
 **              FUNCTION DEFINITIONS
 ******************************************************************************/
#define NUM_INTERRUPTS                 (128u)
extern void (*fnRAMVectors[NUM_INTERRUPTS])(void);
extern void IRQHandler(void);

void dumpRegisterBank(char *name, unsigned int base, int maxOffset)
{
	for (int i = 0; i <= maxOffset; i+=4) {
		unsigned long value = HWREG(base + i);
		ConsoleUtilsPrintf("	%s offset 0x%03x = 0x%08x\n",
				name,
				i,
				value);
	}

}


/*
 UBOOT BOot Command:
setenv autoload no;dhcp;setenv loadaddr 0x80000000; setenv serverip 192.168.0.102;setenv tftproot /home/brian/cmpt433/public/baremetal;setenv bootfile ${tftproot}/download.bin;tftp ${loadaddr} ${bootfile};echo *** Booting to BareMetal ***;go ${loadaddr};
 */

void dumpMemoryRegisterBank(char *name, unsigned int base, int maxOffset)
{
	unsigned int registers[] = {
			0x0,0x10,0x14,0x18,0x1C,0x40,0x44,0x48,0x50,0x54,0x60,0x64,0x68,0x6C,
			0x70,0x74,0x78,0x7C,0x80,0x84,0x90,0x94,0x98,0x9C,0xA0,0xA4,0xA8,
			//0xAC,0xB0, 0xB4,
			//
			0xC0,0xC4,0xC8,0xCC,0xD0,0xD4,0xD8,
			//0xDC,0xE0,0xE4,

			0xF0,0xF4,0xF8,0xFC,0x100,0x104,0x108,
			//0x10C,0x110,0x114,
			0x120,0x124,0x128,0x12C,0x130,0x134,0x138,
			//0x13C,0x140,0x144,
			0x150,0x154,0x158,0x15C,0x160,0x164,0x168,
			//0x16C,0x170,0x174,
			0x180,0x184,0x188,0x18C,0x190,0x194,0x198,
			//0x19C,0x1A0,0x1A4,
			0x1E0,0x1E4,0x1EC,0x1F0,0x1F4,0x1F8,0x1FC,0x200,0x204,0x208,
			0x20C,0x210,0x214,0x218,0x21C,0x220,0x240,0x244,0x248,0x24C,0x250,0x254,
			0x258,0x25C,0x260,0x264,0x268,0x26C,0x270,0x274,0x278,0x27C,0x280,0x284,
			0x288,0x28C,0x290,0x294,0x298,0x29C,0x2A0,0x2A4,0x2A8,0x2AC,0x2B0,0x2B4,
			0x2B8,0x2BC,0x2D0,0x300,0x304,0x308,0x310,0x314,0x318,0x320,0x324,0x328,
			0x330,0x334,0x338,0x340,0x344,0x348,0x350,0x354,0x358,0x360,0x364,0x368,
			0x370,0x374,0x378,
			-1
	};
	for (int i = 0; registers[i] != -1; i++) {
		int reg = registers[i];

		ConsoleUtilsPrintf("	%s offset 0x%03x = ",
				name,
				reg);

		unsigned long value = HWREG(base + reg);

		ConsoleUtilsPrintf("0x%08x\n",
				value);
	}

}

unsigned int ARM_ReadVectorBaseAddressReg(void)
{
	int status;

	//	MRC p15, 0, <Rd>, c12, c0, 0 ; Read Secure or Nonsecure Vector Base
	//	; Address Register
	//	MCR p15, 0, <Rd>, c12, c0, 0 ; Write Secure or Nonsecure Vector Base
	//	; Address Register
	__asm ("	MRC p15, 0, %0, c12, c0, 0" : "=r" (status));
	return status;
}

// Only works when in secure-privileged mode.
// Bare metal here is nonsecure privileged.
//unsigned int ARM_ReadMonitorVectorBaseAddressReg(void)
//{
//    int status;
//    __asm ("	MRC p15, 0, %0, c12, c0, 1" : "=r" (status));
//    return status;
//}
unsigned int ARM_ReadInterruptStatusReg(void)
{
	int status;
	__asm ("	MRC p15, 0, %0, c12, c1, 0" : "=r" (status));
	return status;
}
void dumpARMRegisters()
{
	ConsoleUtilsPrintf("ARM: vector base addr (p15 c12)          = 0x%08x\n",
			ARM_ReadVectorBaseAddressReg());
	//	ConsoleUtilsPrintf("ARM: Monitor vector base addr (p15 c12)  = 0x%08x\n",
	//			ARM_ReadMonitorVectorBaseAddressReg());
	ConsoleUtilsPrintf("ARM: Interrupt status (pendings)(p15 c12)= 0x%08x\n",
			ARM_ReadInterruptStatusReg());

	ConsoleUtilsPrintf("ISR Vector Table: \n");
	for (unsigned int offset = 0; offset <= 0x3c; offset += 4) {
		unsigned int addr = 0x4030fc00 + offset;
		unsigned int val = *((volatile unsigned int *)(addr));
		ConsoleUtilsPrintf("	0x%08x = 0x%08x\n", addr, val);
	}

	ConsoleUtilsPrintf("Memory dump for where vector's IRQ Handler links to: \n");
	for (int addr = 0x4030fc00; addr < 0x4030ffff; addr += 4) {
		unsigned int val = *((volatile unsigned int *)(addr));
		if (addr % 0x100 == 0) {
			ConsoleUtilsPrintf("\n");
			ConsoleUtilsPrintf("Block Starting at 0x%08x:\n", addr);
		}
		if (addr % 0x10 == 0) {
			ConsoleUtilsPrintf("\n");
			ConsoleUtilsPrintf("	0x%08x: ", addr);
		}
		ConsoleUtilsPrintf("0x%08x ", val);
	}
	ConsoleUtilsPrintf("\n");

	ConsoleUtilsPrintf("IRQHandler addr = 0x%08x\n",
			IRQHandler);
	ConsoleUtilsPrintf("Memory dump for IRQHandler: \n");
	for (int offset = 0; offset < 0x100; offset += 4) {
		int addr = (int)IRQHandler + offset;
		unsigned int val = *((volatile unsigned int *)(addr));
		//		if (offset % 0x100 == 0) {
		//			ConsoleUtilsPrintf("\n");
		//			ConsoleUtilsPrintf("Block Starting at 0x%08x:\n", addr);
		//		}
		if (offset % 0x10 == 0) {
			ConsoleUtilsPrintf("\n");
			ConsoleUtilsPrintf("	0x%08x: ", addr);
		}
		ConsoleUtilsPrintf("0x%08x ", val);
	}
	ConsoleUtilsPrintf("\n");



}

void dumpInterruptRegisters()
{
	ConsoleUtilsPrintf("Now dumping interrupt state:\n");
	dumpRegisterBank("SOC_AINTC_REGS", SOC_AINTC_REGS, 0x2FC);
	dumpRegisterBank("SOC_UART_0_REGS", SOC_UART_0_REGS, 0x84);

	dumpMemoryRegisterBank("SOC_GPMC_0_REGS", SOC_GPMC_0_REGS, 0x378);

	//	dumpRegisterBank("ISR fnRAMVectors[]", fnRAMVectors, NUM_INTERRUPTS);
	for (int i = 0; i < NUM_INTERRUPTS; i++) {
		ConsoleUtilsPrintf("	ISR %02d adr 0x%08x\n",
				i, fnRAMVectors[i]);
	}

	ConsoleUtilsPrintf("	UARTIsr addr 0x%08x\n", UARTIsr);
	ConsoleUtilsPrintf("	fnRAMVectors addr 0x%08x\n", fnRAMVectors);

	// ISR Vector
	ConsoleUtilsPrintf("	Default IRQ Handler Addr 0x%08x\n", *((volatile unsigned int*)0x4030CE38));
	dumpARMRegisters();

}


/*****************************************************************************
 **                INTERNAL MACRO DEFINITIONS
 *****************************************************************************/
#include "gpio_v2.h"

#define LED_GPIO_BASE           (SOC_GPIO_1_REGS)
#define LED0_PIN (21)
#define LED1_PIN (22)
#define LED2_PIN (23)
#define LED3_PIN (24)

#define LED_MASK ((1<<LED0_PIN) | (1<<LED1_PIN) | (1<<LED2_PIN) | (1<<LED3_PIN))

#define DELAY_TIME 0x4000000

static void initializeLeds(void)
{
	/* Enabling functional clocks for GPIO1 instance. */
	GPIO1ModuleClkConfig();

	/* Selecting GPIO1[23] pin for use. */
	//GPIO1Pin23PinMuxSetup();

	/* Enabling the GPIO module. */
	GPIOModuleEnable(LED_GPIO_BASE);

	/* Resetting the GPIO module. */
	GPIOModuleReset(LED_GPIO_BASE);

	/* Setting the GPIO pin as an output pin. */
	GPIODirModeSet(LED_GPIO_BASE,
			LED0_PIN,
			GPIO_DIR_OUTPUT);
	GPIODirModeSet(LED_GPIO_BASE,
			LED1_PIN,
			GPIO_DIR_OUTPUT);
	GPIODirModeSet(LED_GPIO_BASE,
			LED2_PIN,
			GPIO_DIR_OUTPUT);
	GPIODirModeSet(LED_GPIO_BASE,
			LED3_PIN,
			GPIO_DIR_OUTPUT);
}

extern void CPUfiqd(void);
extern void CPUirqd(void);

void disableWatchdog(void) {
	ConsoleUtilsPrintf("Disabling watchdog...\n");
	//	To disable the timer, follow this sequence:
	//	1. Write XXXX AAAAh in WDT_WSPR.
	HWREG(SOC_WDT_1_REGS + WDT_WSPR) = 0xAAAA;

	//	2. Poll for posted write to complete using WDT_WWPS.W_PEND_WSPR.
	while (HWREG(SOC_WDT_1_REGS + WDT_WWPS) & (1 << 4)) {
		;
	}

	//	3. Write XXXX 5555h in WDT_WSPR.
	HWREG(SOC_WDT_1_REGS + WDT_WSPR) = 0x5555;

	//	4. Poll for posted write to complete using WDT_WWPS.W_PEND_WSPR.
	while (HWREG(SOC_WDT_1_REGS + WDT_WWPS) & (1 << 4)) {
		;
	}
	ConsoleUtilsPrintf("   done disabling watchdog!\n");


	//	To enable the timer, follow this sequence:
	//	1. Write XXXX BBBBh in WDT_WSPR.
	//	2. Poll for posted write to complete using WDT_WWPS.W_PEND_WSPR.
	//	3. Write XXXX 4444h in WDT_WSPR.
	//	4. Poll for posted write to complete using WDT_WWPS.W_PEND_WSPR.
	//	All other write sequences on the WDT_WSPR register have no effect on the start/stop feature of the
	//	module.
}


void disableCache(void) {
	/* 2016:
	 * NO change:   No change (crash on ISR; main() works).
	 * Disable I:   No change (crash on ISR)
	 * Disable C:   No change (crash on ISR) (but is sooo slow)
	 * Disable Z:   No change (crash on ISR)
	 * Disable MMU: ISR work(!!), but main() is *soooo sloooow*
	 * Disabling all seems to work, but slower, and unknown timing requirements (see CRAZY note)
	 */

//	volatile int i = 0;
//	for (int i = 0; i < 1000000000; i++) {
//		i++;
//	}

	// !!! CRAZY !!!
	// Must have these two printf's here or it locks up on subsequent print's.
	// It also ends up showing these twice. Does resetting the MMU restart this function?
	// Restart the processor/program?

	int status = 0x00;
	ConsoleUtilsPrintf("   Garbage print statement just to generate some text\n");
	ConsoleUtilsPrintf("   Garbage print statement just to generate some text\n");

	__asm ("	MRC p15, 0, %0, c1, c0, 0" : "=r" (status));
//	ConsoleUtilsPrintf("   Start disabling cache; Control Register c1-c0: 0x%08x\n", status);
	status &= ~(1 << 0);	// Disable MMU
	status &= ~(1 << 2);	// Disable C-Bit (data cache)
	status &= ~(1 << 11);	// Disable Z-bit (program flow prediction)
	status &= ~(1 << 12);	// Disable I-Bit (instruction cache)
//	ConsoleUtilsPrintf("   --> wrote back:                              : 0x%08x\n", status);
	__asm ("	MCR p15, 0, %0, c1, c0, 0" : : "r" (status));

//	status = 0x00;
//	__asm ("	MRC p15, 0, %0, c1, c0, 0" : "=r" (status));
//	ConsoleUtilsPrintf("   Done  disabling cache; Control Register c1-c0: 0x%08x\n", status);

}



int main()
{
/*
   Add the following to init.S, at the start of Entry:

@
@ 2016: Brian Fraser's Fix for UBoot Messing with Interrupts
@ Disable the MMU, instruction and data caches.
@ Without tihs, the ISRs seem not to work with the latest UBoot code (2016)
@

	     SUB   r0, r0, r0
         MCR   p15, 0, r0, c1, c0, 0


*/



	//	disableWatchdog();
	//	while (1)
	//		;
	//

//	disableCache();

	unsigned long counter = 0;

//	// HACK 4: Overwrite the location of the IRQHandler in the vector table to
//	//         be the actual one we have:
//	*((unsigned int*) 0x4030fc38) = (unsigned int) IRQHandler;
//
//	// HACK 3: Try these (before the config block)
//	HWREG(SOC_GPMC_0_REGS + 0x10) = 0x08;
//	HWREG(SOC_GPMC_0_REGS + 0x50) = 0x12;
//
//	// HACK 2: Reset the rest of CONFIG0
//	// Has no effect on behaviour.
//	HWREG(SOC_GPMC_0_REGS + 0x60) = 0x00000800;
//	HWREG(SOC_GPMC_0_REGS + 0x64) = 0x001e1e00;
//	HWREG(SOC_GPMC_0_REGS + 0x68) = 0x001e1e00;
//	HWREG(SOC_GPMC_0_REGS + 0x6c) = 0x16051807;
//	HWREG(SOC_GPMC_0_REGS + 0x70) = 0x00151e1e;
//	HWREG(SOC_GPMC_0_REGS + 0x74) = 0x16000f80;
//	// HACK 1: Change GPMC_CONFIG7_0 (offset 78) to match "old" settings:
//	// - Old boot loader comes up 0x48
//	// - New boot loader comes up f40
//	// ==> Result: No change in behaviour under new bootloader (did change register though).
//	HWREG(SOC_GPMC_0_REGS + 0x78) = 0x48;

	UartInitialize();

	initializeLeds();

	// HACK: Try disabling FIQ; did nothing.
	//CPUfiqd();
	//CPUirqd();	// Correctly disables interrupts.


	//	disableWatchdog();
//	disableCache();


	ConsoleUtilsPrintf("\n\nDemo bare metal UART application with Rx Interrupts!\n");


	// Clear all the LEDs:
	HWREG(LED_GPIO_BASE + GPIO_CLEARDATAOUT) = LED_MASK;


	while(1)
	{
		// Check for new character:
		if (rxByte != 0) {
			ConsoleUtilsPrintf("--> %c\n", rxByte);
			rxByte = 0;
		}

		// Do the usual counter:
		counter++;
//		if (counter % 50000000 == 0) {
		if (counter % 500000 == 0) {
			ConsoleUtilsPrintf("Count = %10u,  ASCII Sum %5d\n", counter, rxTextAsciiSum);

			// Hit the watchdog (must #include "watchdog.h"
			// Each time you hit the WD, must pass it a different number
			// than the last time you hit it.
			WatchdogTimerTriggerSet(SOC_WDT_1_REGS, counter);
		}
	}
}

/*
 ** Interrupt Service Routine for UART.
 */
static void UARTIsr(void)
{
	// Set all the LEDs:
	HWREG(LED_GPIO_BASE + GPIO_SETDATAOUT) = LED_MASK;

	unsigned int intId = 0;

	/* Checking the source of UART interrupt. */
	intId = UARTIntIdentityGet(SOC_UART_0_REGS);

	switch(intId) {

	case UART_INTID_RX_THRES_REACH:
		rxByte = UARTCharGetNonBlocking(SOC_UART_0_REGS);
		//UARTCharPutNonBlocking(SOC_UART_0_REGS, rxByte);
		rxTextAsciiSum += rxByte;
		break;

	default:
		break;
	}

}


/*********************************************************
 *                  UART Initialization
 *********************************************************/

static void UartInitialize()
{
	/* Configuring the system clocks for UART0 instance. */
	UART0ModuleClkConfig();
	/* Performing the Pin Multiplexing for UART0 instance. */
	UARTPinMuxSetup(0);
	/* Performing a module reset. */
	UARTModuleReset(SOC_UART_0_REGS);
	/* Performing Baud Rate settings. */
	UartBaudRateSet();
	/* Switching to Configuration Mode B. */
	UARTRegConfigModeEnable(SOC_UART_0_REGS, UART_REG_CONFIG_MODE_B);
	/* Programming the Line Characteristics. */
	UARTLineCharacConfig(SOC_UART_0_REGS,
			(UART_FRAME_WORD_LENGTH_8 | UART_FRAME_NUM_STB_1),
			UART_PARITY_NONE);
	/* Disabling write access to Divisor Latches. */
	UARTDivisorLatchDisable(SOC_UART_0_REGS);
	/* Disabling Break Control. */
	UARTBreakCtl(SOC_UART_0_REGS, UART_BREAK_COND_DISABLE);
	/* Switching to UART16x operating mode. */
	UARTOperatingModeSelect(SOC_UART_0_REGS, UART16x_OPER_MODE);
	/* Select the console type based on compile time check */
	ConsoleUtilsSetType(CONSOLE_UART);

//	dumpInterruptRegisters();


	/* Performing Interrupt configurations. */
	UartInterruptEnable();


//	dumpInterruptRegisters();
}


/*
 ** A wrapper function performing Baud Rate settings.
 */
static void UartBaudRateSet(void)
{
	unsigned int divisorValue = 0;

	/* Computing the Divisor Value. */
	divisorValue = UARTDivisorValCompute(UART_MODULE_INPUT_CLK,
			BAUD_RATE_115200,
			UART16x_OPER_MODE,
			UART_MIR_OVERSAMPLING_RATE_42);

	/* Programming the Divisor Latches. */
	UARTDivisorLatchWrite(SOC_UART_0_REGS, divisorValue);
}

/*
 ** A wrapper function performing Interrupt configurations.
 */
static void UartInterruptEnable(void)
{
	/* Enabling IRQ in CPSR of ARM processor. */
	IntMasterIRQEnable();

	/* Configuring AINTC to receive UART0 interrupts. */
	/* ..Initializing the ARM Interrupt Controller. */
	IntAINTCInit();
	/* ..Registering the Interrupt Service Routine(ISR). */
	IntRegister(SYS_INT_UART0INT, UARTIsr);
	/* ..Setting the priority for the system interrupt in AINTC. */
	IntPrioritySet(SYS_INT_UART0INT, 0, AINTC_HOSTINT_ROUTE_IRQ);
	/* ..Enabling the system interrupt in AINTC. */
	IntSystemEnable(SYS_INT_UART0INT);

	/* Enabling the specified UART interrupts. */
	UARTIntEnable(SOC_UART_0_REGS, (UART_INT_RHR_CTI));
}

